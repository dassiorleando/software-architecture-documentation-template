{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Software Architecture Documentation Template You can access the generated documentation here (demo) , it's based on a sample you can download at arc42.org . sequenceDiagram title Sample Mermaid Diagram box Purple Alice & John participant A participant J end box Another Group participant B participant C end A->>J: Hello John, how are you? J->>A: Great! A->>B: Hello Bob, how is Charley? B->>C: Hello Charley, how are you? Capabilities Arc42 - the documentation template in place, link . Mermaid - used for diagramming to better illustrate your software architecture, link . C4 Model - For context and container representation of your systems, link . Mkdocs Material - is being used as the static site generator along with the material template, link . GitHub Action - CI/CD in place to deploy the documentation as a GitHub Page site. Commands pip install -r requirements.txt - install the dependencies. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. diagrams # Folder containing your Mermaid and C4 diagrams. decisions # The location of your architecture decisions records. images # Images displayed in the pages. css/js # To be used only if you need to customize the site. .github # GitHub Action CI/CD pipeline. ... # Other markdown pages, images and other files. TODO [x] Fix the GitHub Page link. [ ] Generate a PDF version of the software architecture documentation.","title":"Software Architecture Documentation Template&nbsp;Hits"},{"location":"#software-architecture-documentation-template","text":"You can access the generated documentation here (demo) , it's based on a sample you can download at arc42.org . sequenceDiagram title Sample Mermaid Diagram box Purple Alice & John participant A participant J end box Another Group participant B participant C end A->>J: Hello John, how are you? J->>A: Great! A->>B: Hello Bob, how is Charley? B->>C: Hello Charley, how are you?","title":"Software Architecture Documentation Template&nbsp;"},{"location":"#capabilities","text":"Arc42 - the documentation template in place, link . Mermaid - used for diagramming to better illustrate your software architecture, link . C4 Model - For context and container representation of your systems, link . Mkdocs Material - is being used as the static site generator along with the material template, link . GitHub Action - CI/CD in place to deploy the documentation as a GitHub Page site.","title":"Capabilities"},{"location":"#commands","text":"pip install -r requirements.txt - install the dependencies. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. diagrams # Folder containing your Mermaid and C4 diagrams. decisions # The location of your architecture decisions records. images # Images displayed in the pages. css/js # To be used only if you need to customize the site. .github # GitHub Action CI/CD pipeline. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"#todo","text":"[x] Fix the GitHub Page link. [ ] Generate a PDF version of the software architecture documentation.","title":"TODO"},{"location":"architecture-constraints/","text":"Architecture Constraints Contents Any requirement that constraints software architects in their freedom of design and implementation decisions or decision about the development process. These constraints sometimes go beyond individual systems and are valid for whole organizations and companies. Motivation Architects should know exactly where they are free in their design decisions and where they must adhere to constraints. Constraints must always be dealt with; they may be negotiable, though. Form Simple tables of constraints with explanations. If needed you can subdivide them into technical constraints, organizational and political constraints and conventions (e.g. programming or versioning guidelines, documentation or naming conventions) See Architecture Constraints in the arc42 documentation.","title":"Architecture Constraints"},{"location":"architecture-constraints/#architecture-constraints","text":"Contents Any requirement that constraints software architects in their freedom of design and implementation decisions or decision about the development process. These constraints sometimes go beyond individual systems and are valid for whole organizations and companies. Motivation Architects should know exactly where they are free in their design decisions and where they must adhere to constraints. Constraints must always be dealt with; they may be negotiable, though. Form Simple tables of constraints with explanations. If needed you can subdivide them into technical constraints, organizational and political constraints and conventions (e.g. programming or versioning guidelines, documentation or naming conventions) See Architecture Constraints in the arc42 documentation.","title":"Architecture Constraints"},{"location":"building-block-view/","text":"Building Block View Content The building block view shows the static decomposition of the system into building blocks (modules, components, subsystems, classes, interfaces, packages, libraries, frameworks, layers, partitions, tiers, functions, macros, operations, data structures, ...) as well as their dependencies (relationships, associations, ...) This view is mandatory for every architecture documentation. In analogy to a house this is the floor plan . Motivation Maintain an overview of your source code by making its structure understandable through abstraction. This allows you to communicate with your stakeholder on an abstract level without disclosing implementation details. Form The building block view is a hierarchical collection of black boxes and white boxes (see figure below) and their descriptions. Level 1 is the white box description of the overall system together with black box descriptions of all contained building blocks. Level 2 zooms into some building blocks of level 1. Thus it contains the white box description of selected building blocks of level 1, together with black box descriptions of their internal building blocks. Level 3 zooms into selected building blocks of level 2, and so on. See Building Block View in the arc42 documentation. Whitebox Overall System Here you describe the decomposition of the overall system using the following white box template. It contains an overview diagram a motivation for the decomposition black box descriptions of the contained building blocks. For these we offer you alternatives: use one table for a short and pragmatic overview of all contained building blocks and their interfaces use a list of black box descriptions of the building blocks according to the black box template (see below). Depending on your choice of tool this list could be sub-chapters (in text files), sub-pages (in a Wiki) or nested elements (in a modeling tool). (optional:) important interfaces, that are not explained in the black box templates of a building block, but are very important for understanding the white box. Since there are so many ways to specify interfaces why do not provide a specific template for them. In the worst case you have to specify and describe syntax, semantics, protocols, error handling, restrictions, versions, qualities, necessary compatibilities and many things more. In the best case you will get away with examples or simple signatures. Overview Diagram Motivation : text explanation Contained Building Blocks : Description of contained building block (black boxes) Important Interfaces : Description of important interfaces Insert your explanations of black boxes from level 1: If you use tabular form you will only describe your black boxes with name and responsibility according to the following schema: Name Responsibility black box 1 Text black box 2 Text If you use a list of black box descriptions then you fill in a separate black box template for every important building block . Its headline is the name of the black box. Name black box 1 Here you describe black box 1> according the the following black box template: Purpose/Responsibility Interface(s), when they are not extracted as separate paragraphs. This interfaces may include qualities and performance characteristics. (Optional) Quality-/Performance characteristics of the black box, e.g.availability, run time behavior, .... (Optional) directory/file location (Optional) Fulfilled requirements (if you need traceability to requirements). (Optional) Open issues/problems/risks Purpose/Responsibility Interface(s) (Optional) Quality/Performance Characteristics (Optional) Directory/File Location (Optional) Fulfilled Requirements (optional) Open Issues/Problems/Risks Name black box 2 black box template Name black box n black box template Name interface 1 ... Name interface m Level 2 Here you can specify the inner structure of (some) building blocks from level 1 as white boxes. You have to decide which building blocks of your system are important enough to justify such a detailed description. Please prefer relevance over completeness. Specify important, surprising, risky, complex or volatile building blocks. Leave out normal, simple, boring or standardized parts of your system White Box building block 1 ...describes the internal structure of building block 1 . white box template White Box building block 2 white box template ... White Box building block m white box template Level 3 Here you can specify the inner structure of (some) building blocks from level 2 as white boxes. When you need more detailed levels of your architecture please copy this part of arc42 for additional levels. White Box building block x.1 Specifies the internal structure of building block x.1 . white box template White Box building block x.2 white box template White Box building block y.1 white box template","title":"Building Block View"},{"location":"building-block-view/#building-block-view","text":"Content The building block view shows the static decomposition of the system into building blocks (modules, components, subsystems, classes, interfaces, packages, libraries, frameworks, layers, partitions, tiers, functions, macros, operations, data structures, ...) as well as their dependencies (relationships, associations, ...) This view is mandatory for every architecture documentation. In analogy to a house this is the floor plan . Motivation Maintain an overview of your source code by making its structure understandable through abstraction. This allows you to communicate with your stakeholder on an abstract level without disclosing implementation details. Form The building block view is a hierarchical collection of black boxes and white boxes (see figure below) and their descriptions. Level 1 is the white box description of the overall system together with black box descriptions of all contained building blocks. Level 2 zooms into some building blocks of level 1. Thus it contains the white box description of selected building blocks of level 1, together with black box descriptions of their internal building blocks. Level 3 zooms into selected building blocks of level 2, and so on. See Building Block View in the arc42 documentation.","title":"Building Block View"},{"location":"building-block-view/#whitebox-overall-system","text":"Here you describe the decomposition of the overall system using the following white box template. It contains an overview diagram a motivation for the decomposition black box descriptions of the contained building blocks. For these we offer you alternatives: use one table for a short and pragmatic overview of all contained building blocks and their interfaces use a list of black box descriptions of the building blocks according to the black box template (see below). Depending on your choice of tool this list could be sub-chapters (in text files), sub-pages (in a Wiki) or nested elements (in a modeling tool). (optional:) important interfaces, that are not explained in the black box templates of a building block, but are very important for understanding the white box. Since there are so many ways to specify interfaces why do not provide a specific template for them. In the worst case you have to specify and describe syntax, semantics, protocols, error handling, restrictions, versions, qualities, necessary compatibilities and many things more. In the best case you will get away with examples or simple signatures. Overview Diagram Motivation : text explanation Contained Building Blocks : Description of contained building block (black boxes) Important Interfaces : Description of important interfaces Insert your explanations of black boxes from level 1: If you use tabular form you will only describe your black boxes with name and responsibility according to the following schema: Name Responsibility black box 1 Text black box 2 Text If you use a list of black box descriptions then you fill in a separate black box template for every important building block . Its headline is the name of the black box.","title":"Whitebox Overall System"},{"location":"building-block-view/#name-black-box-1","text":"Here you describe black box 1> according the the following black box template: Purpose/Responsibility Interface(s), when they are not extracted as separate paragraphs. This interfaces may include qualities and performance characteristics. (Optional) Quality-/Performance characteristics of the black box, e.g.availability, run time behavior, .... (Optional) directory/file location (Optional) Fulfilled requirements (if you need traceability to requirements). (Optional) Open issues/problems/risks Purpose/Responsibility Interface(s) (Optional) Quality/Performance Characteristics (Optional) Directory/File Location (Optional) Fulfilled Requirements (optional) Open Issues/Problems/Risks","title":"Name black box 1"},{"location":"building-block-view/#name-black-box-2","text":"black box template","title":"Name black box 2"},{"location":"building-block-view/#name-black-box-n","text":"black box template","title":"Name black box n"},{"location":"building-block-view/#name-interface-1","text":"...","title":"Name interface 1"},{"location":"building-block-view/#name-interface-m","text":"","title":"Name interface m"},{"location":"building-block-view/#level-2","text":"Here you can specify the inner structure of (some) building blocks from level 1 as white boxes. You have to decide which building blocks of your system are important enough to justify such a detailed description. Please prefer relevance over completeness. Specify important, surprising, risky, complex or volatile building blocks. Leave out normal, simple, boring or standardized parts of your system","title":"Level 2"},{"location":"building-block-view/#white-box-building-block-1","text":"...describes the internal structure of building block 1 . white box template","title":"White Box building block 1"},{"location":"building-block-view/#white-box-building-block-2","text":"white box template ...","title":"White Box building block 2"},{"location":"building-block-view/#white-box-building-block-m","text":"white box template","title":"White Box building block m"},{"location":"building-block-view/#level-3","text":"Here you can specify the inner structure of (some) building blocks from level 2 as white boxes. When you need more detailed levels of your architecture please copy this part of arc42 for additional levels.","title":"Level 3"},{"location":"building-block-view/#white-box-building-block-x1","text":"Specifies the internal structure of building block x.1 . white box template","title":"White Box building block x.1"},{"location":"building-block-view/#white-box-building-block-x2","text":"white box template","title":"White Box building block x.2"},{"location":"building-block-view/#white-box-building-block-y1","text":"white box template","title":"White Box building block y.1"},{"location":"context-scope/","text":"Context and Scope Contents Context and scope - as the name suggests - delimits your system (i.e. your scope) from all its communication partners (neighboring systems and users, i.e. the context of your system). It thereby specifies the external interfaces. If necessary, differentiate the business context (domain specific inputs and outputs) from the technical context (channels, protocols, hardware). Motivation The domain interfaces and technical interfaces to communication partners are among your system's most critical aspects. Make sure that you completely understand them. Form Various options: Context diagrams Lists of communication partners and their interfaces. See Context and Scope in the arc42 documentation. Business Context Contents Specification of all communication partners (users, IT-systems, ...) with explanations of domain specific inputs and outputs or interfaces. Optionally you can add domain specific formats or communication protocols. Motivation All stakeholders should understand which data are exchanged with the environment of the system. Form All kinds of diagrams that show the system as a black box and specify the domain interfaces to communication partners. Alternatively (or additionally) you can use a table. The title of the table is the name of your system, the three columns contain the name of the communication partner, the inputs, and the outputs. Diagram or Table C4Context title System Context diagram for Internet Banking System Enterprise_Boundary(b0, \"BankBoundary0\") { Person(customerA, \"Banking Customer A\", \"A customer of the bank, with personal bank accounts.\") Person(customerB, \"Banking Customer B\") Person_Ext(customerC, \"Banking Customer C\", \"desc\") Person(customerD, \"Banking Customer D\", \"A customer of the bank, <br/> with personal bank accounts.\") System(SystemAA, \"Internet Banking System\", \"Allows customers to view information about their bank accounts, and make payments.\") Enterprise_Boundary(b1, \"BankBoundary\") { SystemDb_Ext(SystemE, \"Mainframe Banking System\", \"Stores all of the core banking information about customers, accounts, transactions, etc.\") System_Boundary(b2, \"BankBoundary2\") { System(SystemA, \"Banking System A\") System(SystemB, \"Banking System B\", \"A system of the bank, with personal bank accounts. next line.\") } System_Ext(SystemC, \"E-mail system\", \"The internal Microsoft Exchange e-mail system.\") SystemDb(SystemD, \"Banking System D Database\", \"A system of the bank, with personal bank accounts.\") Boundary(b3, \"BankBoundary3\", \"boundary\") { SystemQueue(SystemF, \"Banking System F Queue\", \"A system of the bank.\") SystemQueue_Ext(SystemG, \"Banking System G Queue\", \"A system of the bank, with personal bank accounts.\") } } } BiRel(customerA, SystemAA, \"Uses\") BiRel(SystemAA, SystemE, \"Uses\") Rel(SystemAA, SystemC, \"Sends e-mails\", \"SMTP\") Rel(SystemC, customerA, \"Sends e-mails to\") UpdateElementStyle(customerA, $fontColor=\"red\", $bgColor=\"grey\", $borderColor=\"red\") UpdateRelStyle(customerA, SystemAA, $textColor=\"blue\", $lineColor=\"blue\", $offsetX=\"5\") UpdateRelStyle(SystemAA, SystemE, $textColor=\"blue\", $lineColor=\"blue\", $offsetY=\"-10\") UpdateRelStyle(SystemAA, SystemC, $textColor=\"blue\", $lineColor=\"blue\", $offsetY=\"-40\", $offsetX=\"-50\") UpdateRelStyle(SystemC, customerA, $textColor=\"red\", $lineColor=\"red\", $offsetX=\"-50\", $offsetY=\"20\") UpdateLayoutConfig($c4ShapeInRow=\"3\", $c4BoundaryInRow=\"1\") Optionally: Explanation of external domain interfaces Technical Context Contents Technical interfaces (channels and transmission media) linking your system to its environment. In addition a mapping of domain specific input/output to the channels, i.e. an explanation which I/O uses which channel. Motivation Many stakeholders make architectural decision based on the technical interfaces between the system and its context. Especially infrastructure or hardware designers decide these technical interfaces. Form E.g. UML deployment diagram describing channels to neighboring systems, together with a mapping table showing the relationships between channels and input/output. <Diagram or Table <optionally: Explanation of technical interfaces <Mapping Input/Output to Channels","title":"Context and Scope"},{"location":"context-scope/#context-and-scope","text":"Contents Context and scope - as the name suggests - delimits your system (i.e. your scope) from all its communication partners (neighboring systems and users, i.e. the context of your system). It thereby specifies the external interfaces. If necessary, differentiate the business context (domain specific inputs and outputs) from the technical context (channels, protocols, hardware). Motivation The domain interfaces and technical interfaces to communication partners are among your system's most critical aspects. Make sure that you completely understand them. Form Various options: Context diagrams Lists of communication partners and their interfaces. See Context and Scope in the arc42 documentation.","title":"Context and Scope"},{"location":"context-scope/#business-context","text":"Contents Specification of all communication partners (users, IT-systems, ...) with explanations of domain specific inputs and outputs or interfaces. Optionally you can add domain specific formats or communication protocols. Motivation All stakeholders should understand which data are exchanged with the environment of the system. Form All kinds of diagrams that show the system as a black box and specify the domain interfaces to communication partners. Alternatively (or additionally) you can use a table. The title of the table is the name of your system, the three columns contain the name of the communication partner, the inputs, and the outputs. Diagram or Table C4Context title System Context diagram for Internet Banking System Enterprise_Boundary(b0, \"BankBoundary0\") { Person(customerA, \"Banking Customer A\", \"A customer of the bank, with personal bank accounts.\") Person(customerB, \"Banking Customer B\") Person_Ext(customerC, \"Banking Customer C\", \"desc\") Person(customerD, \"Banking Customer D\", \"A customer of the bank, <br/> with personal bank accounts.\") System(SystemAA, \"Internet Banking System\", \"Allows customers to view information about their bank accounts, and make payments.\") Enterprise_Boundary(b1, \"BankBoundary\") { SystemDb_Ext(SystemE, \"Mainframe Banking System\", \"Stores all of the core banking information about customers, accounts, transactions, etc.\") System_Boundary(b2, \"BankBoundary2\") { System(SystemA, \"Banking System A\") System(SystemB, \"Banking System B\", \"A system of the bank, with personal bank accounts. next line.\") } System_Ext(SystemC, \"E-mail system\", \"The internal Microsoft Exchange e-mail system.\") SystemDb(SystemD, \"Banking System D Database\", \"A system of the bank, with personal bank accounts.\") Boundary(b3, \"BankBoundary3\", \"boundary\") { SystemQueue(SystemF, \"Banking System F Queue\", \"A system of the bank.\") SystemQueue_Ext(SystemG, \"Banking System G Queue\", \"A system of the bank, with personal bank accounts.\") } } } BiRel(customerA, SystemAA, \"Uses\") BiRel(SystemAA, SystemE, \"Uses\") Rel(SystemAA, SystemC, \"Sends e-mails\", \"SMTP\") Rel(SystemC, customerA, \"Sends e-mails to\") UpdateElementStyle(customerA, $fontColor=\"red\", $bgColor=\"grey\", $borderColor=\"red\") UpdateRelStyle(customerA, SystemAA, $textColor=\"blue\", $lineColor=\"blue\", $offsetX=\"5\") UpdateRelStyle(SystemAA, SystemE, $textColor=\"blue\", $lineColor=\"blue\", $offsetY=\"-10\") UpdateRelStyle(SystemAA, SystemC, $textColor=\"blue\", $lineColor=\"blue\", $offsetY=\"-40\", $offsetX=\"-50\") UpdateRelStyle(SystemC, customerA, $textColor=\"red\", $lineColor=\"red\", $offsetX=\"-50\", $offsetY=\"20\") UpdateLayoutConfig($c4ShapeInRow=\"3\", $c4BoundaryInRow=\"1\") Optionally: Explanation of external domain interfaces","title":"Business Context"},{"location":"context-scope/#technical-context","text":"Contents Technical interfaces (channels and transmission media) linking your system to its environment. In addition a mapping of domain specific input/output to the channels, i.e. an explanation which I/O uses which channel. Motivation Many stakeholders make architectural decision based on the technical interfaces between the system and its context. Especially infrastructure or hardware designers decide these technical interfaces. Form E.g. UML deployment diagram describing channels to neighboring systems, together with a mapping table showing the relationships between channels and input/output. <Diagram or Table <optionally: Explanation of technical interfaces <Mapping Input/Output to Channels","title":"Technical Context"},{"location":"cross-cutting-concepts/","text":"Cross-cutting Concepts Content This section describes overall, principal regulations and solution ideas that are relevant in multiple parts (= cross-cutting) of your system. Such concepts are often related to multiple building blocks. They can include many different topics, such as models, especially domain models architecture or design patterns rules for using specific technology principal, often technical decisions of an overarching (= cross-cutting) nature implementation rules Motivation Concepts form the basis for conceptual integrity (consistency, homogeneity) of the architecture. Thus, they are an important contribution to achieve inner qualities of your system. Some of these concepts cannot be assigned to individual building blocks, e.g. security or safety. Form The form can be varied: concept papers with any kind of structure cross-cutting model excerpts or scenarios using notations of the architecture views sample implementations, especially for technical concepts reference to typical usage of standard frameworks (e.g. using Hibernate for object/relational mapping) Structure A potential (but not mandatory) structure for this section could be: Domain concepts User Experience concepts (UX) Safety and security concepts Architecture and design patterns \\\"Under-the-hood\\\" development concepts operational concepts Note: it might be difficult to assign individual concepts to one specific topic on this list. See Concepts in the arc42 documentation. Concept 1 explanation Concept 2 explanation ... Concept n explanation","title":"Cross-cutting Concepts"},{"location":"cross-cutting-concepts/#cross-cutting-concepts","text":"Content This section describes overall, principal regulations and solution ideas that are relevant in multiple parts (= cross-cutting) of your system. Such concepts are often related to multiple building blocks. They can include many different topics, such as models, especially domain models architecture or design patterns rules for using specific technology principal, often technical decisions of an overarching (= cross-cutting) nature implementation rules Motivation Concepts form the basis for conceptual integrity (consistency, homogeneity) of the architecture. Thus, they are an important contribution to achieve inner qualities of your system. Some of these concepts cannot be assigned to individual building blocks, e.g. security or safety. Form The form can be varied: concept papers with any kind of structure cross-cutting model excerpts or scenarios using notations of the architecture views sample implementations, especially for technical concepts reference to typical usage of standard frameworks (e.g. using Hibernate for object/relational mapping) Structure A potential (but not mandatory) structure for this section could be: Domain concepts User Experience concepts (UX) Safety and security concepts Architecture and design patterns \\\"Under-the-hood\\\" development concepts operational concepts Note: it might be difficult to assign individual concepts to one specific topic on this list. See Concepts in the arc42 documentation.","title":"Cross-cutting Concepts"},{"location":"cross-cutting-concepts/#concept-1","text":"explanation","title":"Concept 1"},{"location":"cross-cutting-concepts/#concept-2","text":"explanation ...","title":"Concept 2"},{"location":"cross-cutting-concepts/#concept-n","text":"explanation","title":"Concept n"},{"location":"deployment-view/","text":"Deployment View Content The deployment view describes: technical infrastructure used to execute your system, with infrastructure elements like geographical locations, environments, computers, processors, channels and net topologies as well as other infrastructure elements and mapping of (software) building blocks to that infrastructure elements. Often systems are executed in different environments, e.g. development environment, test environment, production environment. In such cases you should document all relevant environments. Especially document a deployment view if your software is executed as distributed system with more than one computer, processor, server or container or when you design and construct your own hardware processors and chips. From a software perspective it is sufficient to capture only those elements of an infrastructure that are needed to show a deployment of your building blocks. Hardware architects can go beyond that and describe an infrastructure to any level of detail they need to capture. Motivation Software does not run without hardware. This underlying infrastructure can and will influence a system and/or some cross-cutting concepts. Therefore, there is a need to know the infrastructure. Maybe a highest level deployment diagram is already contained in section 3.2. as technical context with your own infrastructure as ONE black box. In this section one can zoom into this black box using additional deployment diagrams: UML offers deployment diagrams to express that view. Use it, probably with nested diagrams, when your infrastructure is more complex. When your (hardware) stakeholders prefer other kinds of diagrams rather than a deployment diagram, let them use any kind that is able to show nodes and channels of the infrastructure. See Deployment View in the arc42 documentation. Infrastructure Level 1 Describe (usually in a combination of diagrams, tables, and text): distribution of a system to multiple locations, environments, computers, processors, .., as well as physical connections between them important justifications or motivations for this deployment structure quality and/or performance features of this infrastructure mapping of software artifacts to elements of this infrastructure For multiple environments or alternative deployments please copy and adapt this section of arc42 for all relevant environments. Overview Diagram Motivation : explanation in text form Quality and/or Performance Features : explanation in text form Mapping of Building Blocks to Infrastructure : description of the mapping Infrastructure Level 2 Here you can include the internal structure of (some) infrastructure elements from level 1. Please copy the structure from level 1 for each selected element. Infrastructure Element 1 diagram + explanation Infrastructure Element 2 diagram + explanation ... Infrastructure Element n diagram + explanation","title":"Deployment View"},{"location":"deployment-view/#deployment-view","text":"Content The deployment view describes: technical infrastructure used to execute your system, with infrastructure elements like geographical locations, environments, computers, processors, channels and net topologies as well as other infrastructure elements and mapping of (software) building blocks to that infrastructure elements. Often systems are executed in different environments, e.g. development environment, test environment, production environment. In such cases you should document all relevant environments. Especially document a deployment view if your software is executed as distributed system with more than one computer, processor, server or container or when you design and construct your own hardware processors and chips. From a software perspective it is sufficient to capture only those elements of an infrastructure that are needed to show a deployment of your building blocks. Hardware architects can go beyond that and describe an infrastructure to any level of detail they need to capture. Motivation Software does not run without hardware. This underlying infrastructure can and will influence a system and/or some cross-cutting concepts. Therefore, there is a need to know the infrastructure. Maybe a highest level deployment diagram is already contained in section 3.2. as technical context with your own infrastructure as ONE black box. In this section one can zoom into this black box using additional deployment diagrams: UML offers deployment diagrams to express that view. Use it, probably with nested diagrams, when your infrastructure is more complex. When your (hardware) stakeholders prefer other kinds of diagrams rather than a deployment diagram, let them use any kind that is able to show nodes and channels of the infrastructure. See Deployment View in the arc42 documentation.","title":"Deployment View"},{"location":"deployment-view/#infrastructure-level-1","text":"Describe (usually in a combination of diagrams, tables, and text): distribution of a system to multiple locations, environments, computers, processors, .., as well as physical connections between them important justifications or motivations for this deployment structure quality and/or performance features of this infrastructure mapping of software artifacts to elements of this infrastructure For multiple environments or alternative deployments please copy and adapt this section of arc42 for all relevant environments. Overview Diagram Motivation : explanation in text form Quality and/or Performance Features : explanation in text form Mapping of Building Blocks to Infrastructure : description of the mapping","title":"Infrastructure Level 1"},{"location":"deployment-view/#infrastructure-level-2","text":"Here you can include the internal structure of (some) infrastructure elements from level 1. Please copy the structure from level 1 for each selected element.","title":"Infrastructure Level 2"},{"location":"deployment-view/#infrastructure-element-1","text":"diagram + explanation","title":"Infrastructure Element 1"},{"location":"deployment-view/#infrastructure-element-2","text":"diagram + explanation ...","title":"Infrastructure Element 2"},{"location":"deployment-view/#infrastructure-element-n","text":"diagram + explanation","title":"Infrastructure Element n"},{"location":"glossary/","text":"Glossary Contents The most important domain and technical terms that your stakeholders use when discussing the system. You can also see the glossary as source for translations if you work in multi-language teams. Motivation You should clearly define your terms, so that all stakeholders have an identical understanding of these terms do not use synonyms and homonyms A table with columns \\ and \\ . Potentially more columns in case you need translations. See Glossary in the arc42 documentation. Term Definition Term-1 definition-1 Term-2 definition-2","title":"Glossary"},{"location":"glossary/#glossary","text":"Contents The most important domain and technical terms that your stakeholders use when discussing the system. You can also see the glossary as source for translations if you work in multi-language teams. Motivation You should clearly define your terms, so that all stakeholders have an identical understanding of these terms do not use synonyms and homonyms A table with columns \\ and \\ . Potentially more columns in case you need translations. See Glossary in the arc42 documentation. Term Definition Term-1 definition-1 Term-2 definition-2","title":"Glossary"},{"location":"introduction-and-goals/","text":"Introduction and Goals Describes the relevant requirements and the driving forces that software architects and development team must consider. These include underlying business goals, essential features, essential functional requirements, quality goals for the architecture and relevant stakeholders and their expectations Requirements Overview Contents Short description of the functional requirements, driving forces, extract (or abstract) of requirements. Link to (hopefully existing) requirements documents (with version number and information where to find it). Motivation From the point of view of the end users a system is created or modified to improve support of a business activity and/or improve the quality. Form Short textual description, probably in tabular use-case format. If requirements documents exist this overview should refer to these documents. Keep these excerpts as short as possible. Balance readability of this document with potential redundancy w.r.t to requirements documents. See Introduction and Goals in the arc42 documentation. Quality Goals Contents The top three (max five) quality goals for the architecture whose fulfillment is of highest importance to the major stakeholders. We really mean quality goals for the architecture. Don't confuse them with project goals. They are not necessarily identical. Consider this overview of potential topics (based upon the ISO 25010 standard): Motivation You should know the quality goals of your most important stakeholders, since they will influence fundamental architectural decisions. Make sure to be very concrete about these qualities, avoid buzzwords. If you as an architect do not know how the quality of your work will be judged... Form A table with quality goals and concrete scenarios, ordered by priorities Stakeholders Contents Explicit overview of stakeholders of the system, i.e. all person, roles or organizations that should know the architecture have to be convinced of the architecture have to work with the architecture or with code need the documentation of the architecture for their work have to come up with decisions about the system or its development Motivation You should know all parties involved in development of the system or affected by the system. Otherwise, you may get nasty surprises later in the development process. These stakeholders determine the extent and the level of detail of your work and its results. Form Table with role names, person names, and their expectations with respect to the architecture and its documentation. Role/Name Contact Expectations Role-1 Contact-1 Expectation-1 Role-2 Contact-2 Expectation-2","title":"Introduction and Goals"},{"location":"introduction-and-goals/#introduction-and-goals","text":"Describes the relevant requirements and the driving forces that software architects and development team must consider. These include underlying business goals, essential features, essential functional requirements, quality goals for the architecture and relevant stakeholders and their expectations","title":"Introduction and Goals"},{"location":"introduction-and-goals/#requirements-overview","text":"Contents Short description of the functional requirements, driving forces, extract (or abstract) of requirements. Link to (hopefully existing) requirements documents (with version number and information where to find it). Motivation From the point of view of the end users a system is created or modified to improve support of a business activity and/or improve the quality. Form Short textual description, probably in tabular use-case format. If requirements documents exist this overview should refer to these documents. Keep these excerpts as short as possible. Balance readability of this document with potential redundancy w.r.t to requirements documents. See Introduction and Goals in the arc42 documentation.","title":"Requirements Overview"},{"location":"introduction-and-goals/#quality-goals","text":"Contents The top three (max five) quality goals for the architecture whose fulfillment is of highest importance to the major stakeholders. We really mean quality goals for the architecture. Don't confuse them with project goals. They are not necessarily identical. Consider this overview of potential topics (based upon the ISO 25010 standard): Motivation You should know the quality goals of your most important stakeholders, since they will influence fundamental architectural decisions. Make sure to be very concrete about these qualities, avoid buzzwords. If you as an architect do not know how the quality of your work will be judged... Form A table with quality goals and concrete scenarios, ordered by priorities","title":"Quality Goals"},{"location":"introduction-and-goals/#stakeholders","text":"Contents Explicit overview of stakeholders of the system, i.e. all person, roles or organizations that should know the architecture have to be convinced of the architecture have to work with the architecture or with code need the documentation of the architecture for their work have to come up with decisions about the system or its development Motivation You should know all parties involved in development of the system or affected by the system. Otherwise, you may get nasty surprises later in the development process. These stakeholders determine the extent and the level of detail of your work and its results. Form Table with role names, person names, and their expectations with respect to the architecture and its documentation. Role/Name Contact Expectations Role-1 Contact-1 Expectation-1 Role-2 Contact-2 Expectation-2","title":"Stakeholders"},{"location":"quality-requirements/","text":"Quality Requirements Content This section contains all quality requirements as quality tree with scenarios. The most important ones have already been described in section 1.2. (quality goals) Here you can also capture quality requirements with lesser priority, which will not create high risks when they are not fully achieved. Motivation Since quality requirements will have a lot of influence on architectural decisions you should know for every stakeholder what is really important to them, concrete and measurable. See Quality Requirements in the arc42 documentation. Quality Tree Content The quality tree (as defined in ATAM -- Architecture Tradeoff Analysis Method) with quality/evaluation scenarios as leafs. Motivation The tree structure with priorities provides an overview for a sometimes large number of quality requirements. Form The quality tree is a high-level overview of the quality goals and requirements: tree-like refinement of the term \\\"quality\\\". Use \\\"quality\\\" or \\\"usefulness\\\" as a root a mind map with quality categories as main branches In any case the tree should include links to the scenarios of the following section. Quality Scenarios Contents Concretization of (sometimes vague or implicit) quality requirements using (quality) scenarios. These scenarios describe what should happen when a stimulus arrives at the system. For architects, two kinds of scenarios are important: Usage scenarios (also called application scenarios or use case scenarios) describe the system's runtime reaction to a certain stimulus. This also includes scenarios that describe the system's efficiency or performance. Example: The system reacts to a user's request within one second. Change scenarios describe a modification of the system or of its immediate environment. Example: Additional functionality is implemented or requirements for a quality attribute change. Motivation Scenarios make quality requirements concrete and allow to more easily measure or decide whether they are fulfilled. Especially when you want to assess your architecture using methods like ATAM you need to describe your quality goals (from section 1.2) more precisely down to a level of scenarios that can be discussed and evaluated. Form Tabular or free form text.","title":"Quality Requirements"},{"location":"quality-requirements/#quality-requirements","text":"Content This section contains all quality requirements as quality tree with scenarios. The most important ones have already been described in section 1.2. (quality goals) Here you can also capture quality requirements with lesser priority, which will not create high risks when they are not fully achieved. Motivation Since quality requirements will have a lot of influence on architectural decisions you should know for every stakeholder what is really important to them, concrete and measurable. See Quality Requirements in the arc42 documentation.","title":"Quality Requirements"},{"location":"quality-requirements/#quality-tree","text":"Content The quality tree (as defined in ATAM -- Architecture Tradeoff Analysis Method) with quality/evaluation scenarios as leafs. Motivation The tree structure with priorities provides an overview for a sometimes large number of quality requirements. Form The quality tree is a high-level overview of the quality goals and requirements: tree-like refinement of the term \\\"quality\\\". Use \\\"quality\\\" or \\\"usefulness\\\" as a root a mind map with quality categories as main branches In any case the tree should include links to the scenarios of the following section.","title":"Quality Tree"},{"location":"quality-requirements/#quality-scenarios","text":"Contents Concretization of (sometimes vague or implicit) quality requirements using (quality) scenarios. These scenarios describe what should happen when a stimulus arrives at the system. For architects, two kinds of scenarios are important: Usage scenarios (also called application scenarios or use case scenarios) describe the system's runtime reaction to a certain stimulus. This also includes scenarios that describe the system's efficiency or performance. Example: The system reacts to a user's request within one second. Change scenarios describe a modification of the system or of its immediate environment. Example: Additional functionality is implemented or requirements for a quality attribute change. Motivation Scenarios make quality requirements concrete and allow to more easily measure or decide whether they are fulfilled. Especially when you want to assess your architecture using methods like ATAM you need to describe your quality goals (from section 1.2) more precisely down to a level of scenarios that can be discussed and evaluated. Form Tabular or free form text.","title":"Quality Scenarios"},{"location":"risks-technical-debts/","text":"Risks and Technical Debts Contents A list of identified technical risks or technical debts, ordered by priority Motivation \"Risk management is project management for grown-ups\" (Tim Lister, Atlantic Systems Guild.) This should be your motto for systematic detection and evaluation of risks and technical debts in the architecture, which will be needed by management stakeholders (e.g. project managers, product owners) as part of the overall risk analysis and measurement planning. Form List of risks and/or technical debts, probably including suggested measures to minimize, mitigate or avoid risks or reduce technical debts. See Risks and Technical Debt in the arc42 documentation.","title":"Risks and Technical Debts"},{"location":"risks-technical-debts/#risks-and-technical-debts","text":"Contents A list of identified technical risks or technical debts, ordered by priority Motivation \"Risk management is project management for grown-ups\" (Tim Lister, Atlantic Systems Guild.) This should be your motto for systematic detection and evaluation of risks and technical debts in the architecture, which will be needed by management stakeholders (e.g. project managers, product owners) as part of the overall risk analysis and measurement planning. Form List of risks and/or technical debts, probably including suggested measures to minimize, mitigate or avoid risks or reduce technical debts. See Risks and Technical Debt in the arc42 documentation.","title":"Risks and Technical Debts"},{"location":"runtime-view/","text":"Runtime View Contents The runtime view describes concrete behavior and interactions of the system's building blocks in form of scenarios from the following areas: important use cases or features: how do building blocks execute them? interactions at critical external interfaces: how do building blocks cooperate with users and neighboring systems? operation and administration: launch, start-up, stop error and exception scenarios Remark: The main criterion for the choice of possible scenarios (sequences, workflows) is their architectural relevance . It is not important to describe a large number of scenarios. You should rather document a representative selection. Motivation You should understand how (instances of) building blocks of your system perform their job and communicate at runtime. You will mainly capture scenarios in your documentation to communicate your architecture to stakeholders that are less willing or able to read and understand the static models (building block view, deployment view). Form There are many notations for describing scenarios, e.g. numbered list of steps (in natural language) activity diagrams or flow charts sequence diagrams BPMN or EPCs (event process chains) state machines ... See Runtime View in the arc42 documentation. Runtime Scenario 1 insert runtime diagram or textual description of the scenario insert description of the notable aspects of the interactions between the building block instances depicted in this diagram. Runtime Scenario 2 ... Runtime Scenario n","title":"Runtime View"},{"location":"runtime-view/#runtime-view","text":"Contents The runtime view describes concrete behavior and interactions of the system's building blocks in form of scenarios from the following areas: important use cases or features: how do building blocks execute them? interactions at critical external interfaces: how do building blocks cooperate with users and neighboring systems? operation and administration: launch, start-up, stop error and exception scenarios Remark: The main criterion for the choice of possible scenarios (sequences, workflows) is their architectural relevance . It is not important to describe a large number of scenarios. You should rather document a representative selection. Motivation You should understand how (instances of) building blocks of your system perform their job and communicate at runtime. You will mainly capture scenarios in your documentation to communicate your architecture to stakeholders that are less willing or able to read and understand the static models (building block view, deployment view). Form There are many notations for describing scenarios, e.g. numbered list of steps (in natural language) activity diagrams or flow charts sequence diagrams BPMN or EPCs (event process chains) state machines ... See Runtime View in the arc42 documentation.","title":"Runtime View"},{"location":"runtime-view/#runtime-scenario-1","text":"insert runtime diagram or textual description of the scenario insert description of the notable aspects of the interactions between the building block instances depicted in this diagram.","title":"Runtime Scenario 1"},{"location":"runtime-view/#runtime-scenario-2","text":"","title":"Runtime Scenario 2"},{"location":"runtime-view/#_1","text":"","title":"..."},{"location":"runtime-view/#runtime-scenario-n","text":"","title":"Runtime Scenario n"},{"location":"solution-strategy/","text":"Solution Strategy Contents A short summary and explanation of the fundamental decisions and solution strategies, that shape system architecture. It includes technology decisions decisions about the top-level decomposition of the system, e.g. usage of an architectural pattern or design pattern decisions on how to achieve key quality goals relevant organizational decisions, e.g. selecting a development process or delegating certain tasks to third parties. Motivation These decisions form the cornerstones for your architecture. They are the foundation for many other detailed decisions or implementation rules. Form Keep the explanations of such key decisions short. Motivate what was decided and why it was decided that way, based upon problem statement, quality goals and key constraints. Refer to details in the following sections. See Solution Strategy in the arc42 documentation.","title":"Solution Strategy"},{"location":"solution-strategy/#solution-strategy","text":"Contents A short summary and explanation of the fundamental decisions and solution strategies, that shape system architecture. It includes technology decisions decisions about the top-level decomposition of the system, e.g. usage of an architectural pattern or design pattern decisions on how to achieve key quality goals relevant organizational decisions, e.g. selecting a development process or delegating certain tasks to third parties. Motivation These decisions form the cornerstones for your architecture. They are the foundation for many other detailed decisions or implementation rules. Form Keep the explanations of such key decisions short. Motivate what was decided and why it was decided that way, based upon problem statement, quality goals and key constraints. Refer to details in the following sections. See Solution Strategy in the arc42 documentation.","title":"Solution Strategy"},{"location":"decisions/0000-index/","text":"Architecture Decision Records Note This section contains the Architecture Decision Records for the project. Decision Statuses draft proposed accepted rejected superseded test Decisions ID Date Decision Status 1 27-11-2024 Sample Decision Draft 0 27-11-2024 Architecture Decision Records None Contents Important, expensive, large scale or risky architecture decisions including rationales. With \\\"decisions\\\" we mean selecting one alternative based on given criteria. Please use your judgement to decide whether an architectural decision should be documented here in this central section or whether you better document it locally (e.g. within the white box template of one building block). Avoid redundancy. Refer to section 4, where you already captured the most important decisions of your architecture. Motivation Stakeholders of your system should be able to comprehend and retrace your decisions. Form Various options: ADR ( Documenting Architecture Decisions ) for every important decision List or table, ordered by importance and consequences or: more detailed in form of separate sections per decision See Architecture Decisions in the arc42 documentation. There you will find links and examples about ADR.","title":"Decision Records"},{"location":"decisions/0000-index/#architecture-decision-records","text":"Note This section contains the Architecture Decision Records for the project.","title":"Architecture Decision Records"},{"location":"decisions/0000-index/#decision-statuses","text":"draft proposed accepted rejected superseded test","title":"Decision Statuses"},{"location":"decisions/0000-index/#decisions","text":"ID Date Decision Status 1 27-11-2024 Sample Decision Draft 0 27-11-2024 Architecture Decision Records None Contents Important, expensive, large scale or risky architecture decisions including rationales. With \\\"decisions\\\" we mean selecting one alternative based on given criteria. Please use your judgement to decide whether an architectural decision should be documented here in this central section or whether you better document it locally (e.g. within the white box template of one building block). Avoid redundancy. Refer to section 4, where you already captured the most important decisions of your architecture. Motivation Stakeholders of your system should be able to comprehend and retrace your decisions. Form Various options: ADR ( Documenting Architecture Decisions ) for every important decision List or table, ordered by importance and consequences or: more detailed in form of separate sections per decision See Architecture Decisions in the arc42 documentation. There you will find links and examples about ADR.","title":"Decisions"},{"location":"decisions/0001-sample/","text":"Sample Decision Context What is the issue that we're seeing that is motivating this decision or change? Assumptions Anything that could cause problems if untrue now or later Decision What is the change that we're proposing and/or doing? Risks Anything that could cause malfunction, delay, or other negative impacts Consequences What becomes easier or more difficult to do because of this change? More Information Provide additional evidence/confidence for the decision outcome Links to other decisions and resources might here appear as well.","title":"Sample Decision"},{"location":"decisions/0001-sample/#sample-decision","text":"","title":"Sample Decision"},{"location":"decisions/0001-sample/#context","text":"What is the issue that we're seeing that is motivating this decision or change?","title":"Context"},{"location":"decisions/0001-sample/#assumptions","text":"Anything that could cause problems if untrue now or later","title":"Assumptions"},{"location":"decisions/0001-sample/#decision","text":"What is the change that we're proposing and/or doing?","title":"Decision"},{"location":"decisions/0001-sample/#risks","text":"Anything that could cause malfunction, delay, or other negative impacts","title":"Risks"},{"location":"decisions/0001-sample/#consequences","text":"What becomes easier or more difficult to do because of this change?","title":"Consequences"},{"location":"decisions/0001-sample/#more-information","text":"Provide additional evidence/confidence for the decision outcome Links to other decisions and resources might here appear as well.","title":"More Information"},{"location":"diagrams/c4-component/","text":"C4Component title Component diagram for Internet Banking System - API Application Container(spa, \"Single Page Application\", \"javascript and angular\", \"Provides all the internet banking functionality to customers via their web browser.\") Container(ma, \"Mobile App\", \"Xamarin\", \"Provides a limited subset to the internet banking functionality to customers via their mobile mobile device.\") ContainerDb(db, \"Database\", \"Relational Database Schema\", \"Stores user registration information, hashed authentication credentials, access logs, etc.\") System_Ext(mbs, \"Mainframe Banking System\", \"Stores all of the core banking information about customers, accounts, transactions, etc.\") Container_Boundary(api, \"API Application\") { Component(sign, \"Sign In Controller\", \"MVC Rest Controller\", \"Allows users to sign in to the internet banking system\") Component(accounts, \"Accounts Summary Controller\", \"MVC Rest Controller\", \"Provides customers with a summary of their bank accounts\") Component(security, \"Security Component\", \"Spring Bean\", \"Provides functionality related to singing in, changing passwords, etc.\") Component(mbsfacade, \"Mainframe Banking System Facade\", \"Spring Bean\", \"A facade onto the mainframe banking system.\") Rel(sign, security, \"Uses\") Rel(accounts, mbsfacade, \"Uses\") Rel(security, db, \"Read & write to\", \"JDBC\") Rel(mbsfacade, mbs, \"Uses\", \"XML/HTTPS\") } Rel_Back(spa, sign, \"Uses\", \"JSON/HTTPS\") Rel(spa, accounts, \"Uses\", \"JSON/HTTPS\") Rel(ma, sign, \"Uses\", \"JSON/HTTPS\") Rel(ma, accounts, \"Uses\", \"JSON/HTTPS\") UpdateRelStyle(spa, sign, $offsetY=\"-40\") UpdateRelStyle(spa, accounts, $offsetX=\"40\", $offsetY=\"40\") UpdateRelStyle(ma, sign, $offsetX=\"-90\", $offsetY=\"40\") UpdateRelStyle(ma, accounts, $offsetY=\"-40\") UpdateRelStyle(sign, security, $offsetX=\"-160\", $offsetY=\"10\") UpdateRelStyle(accounts, mbsfacade, $offsetX=\"140\", $offsetY=\"10\") UpdateRelStyle(security, db, $offsetY=\"-40\") UpdateRelStyle(mbsfacade, mbs, $offsetY=\"-40\")","title":"C4 component"},{"location":"diagrams/c4-container/","text":"C4Container title Container diagram for Internet Banking System System_Ext(email_system, \"E-Mail System\", \"The internal Microsoft Exchange system\", $tags=\"v1.0\") Person(customer, Customer, \"A customer of the bank, with personal bank accounts\", $tags=\"v1.0\") Container_Boundary(c1, \"Internet Banking\") { Container(spa, \"Single-Page App\", \"JavaScript, Angular\", \"Provides all the Internet banking functionality to customers via their web browser\") Container_Ext(mobile_app, \"Mobile App\", \"C#, Xamarin\", \"Provides a limited subset of the Internet banking functionality to customers via their mobile device\") Container(web_app, \"Web Application\", \"Java, Spring MVC\", \"Delivers the static content and the Internet banking SPA\") ContainerDb(database, \"Database\", \"SQL Database\", \"Stores user registration information, hashed auth credentials, access logs, etc.\") ContainerDb_Ext(backend_api, \"API Application\", \"Java, Docker Container\", \"Provides Internet banking functionality via API\") } System_Ext(banking_system, \"Mainframe Banking System\", \"Stores all of the core banking information about customers, accounts, transactions, etc.\") Rel(customer, web_app, \"Uses\", \"HTTPS\") UpdateRelStyle(customer, web_app, $offsetY=\"60\", $offsetX=\"90\") Rel(customer, spa, \"Uses\", \"HTTPS\") UpdateRelStyle(customer, spa, $offsetY=\"-40\") Rel(customer, mobile_app, \"Uses\") UpdateRelStyle(customer, mobile_app, $offsetY=\"-30\") Rel(web_app, spa, \"Delivers\") UpdateRelStyle(web_app, spa, $offsetX=\"130\") Rel(spa, backend_api, \"Uses\", \"async, JSON/HTTPS\") Rel(mobile_app, backend_api, \"Uses\", \"async, JSON/HTTPS\") Rel_Back(database, backend_api, \"Reads from and writes to\", \"sync, JDBC\") Rel(email_system, customer, \"Sends e-mails to\") UpdateRelStyle(email_system, customer, $offsetX=\"-45\") Rel(backend_api, email_system, \"Sends e-mails using\", \"sync, SMTP\") UpdateRelStyle(backend_api, email_system, $offsetY=\"-60\") Rel(backend_api, banking_system, \"Uses\", \"sync/async, XML/HTTPS\") UpdateRelStyle(backend_api, banking_system, $offsetY=\"-50\", $offsetX=\"-140\")","title":"C4 container"},{"location":"diagrams/c4-context/","text":"C4Context title System Context diagram for Internet Banking System Enterprise_Boundary(b0, \"BankBoundary0\") { Person(customerA, \"Banking Customer A\", \"A customer of the bank, with personal bank accounts.\") Person(customerB, \"Banking Customer B\") Person_Ext(customerC, \"Banking Customer C\", \"desc\") Person(customerD, \"Banking Customer D\", \"A customer of the bank, <br/> with personal bank accounts.\") System(SystemAA, \"Internet Banking System\", \"Allows customers to view information about their bank accounts, and make payments.\") Enterprise_Boundary(b1, \"BankBoundary\") { SystemDb_Ext(SystemE, \"Mainframe Banking System\", \"Stores all of the core banking information about customers, accounts, transactions, etc.\") System_Boundary(b2, \"BankBoundary2\") { System(SystemA, \"Banking System A\") System(SystemB, \"Banking System B\", \"A system of the bank, with personal bank accounts. next line.\") } System_Ext(SystemC, \"E-mail system\", \"The internal Microsoft Exchange e-mail system.\") SystemDb(SystemD, \"Banking System D Database\", \"A system of the bank, with personal bank accounts.\") Boundary(b3, \"BankBoundary3\", \"boundary\") { SystemQueue(SystemF, \"Banking System F Queue\", \"A system of the bank.\") SystemQueue_Ext(SystemG, \"Banking System G Queue\", \"A system of the bank, with personal bank accounts.\") } } } BiRel(customerA, SystemAA, \"Uses\") BiRel(SystemAA, SystemE, \"Uses\") Rel(SystemAA, SystemC, \"Sends e-mails\", \"SMTP\") Rel(SystemC, customerA, \"Sends e-mails to\") UpdateElementStyle(customerA, $fontColor=\"red\", $bgColor=\"grey\", $borderColor=\"red\") UpdateRelStyle(customerA, SystemAA, $textColor=\"blue\", $lineColor=\"blue\", $offsetX=\"5\") UpdateRelStyle(SystemAA, SystemE, $textColor=\"blue\", $lineColor=\"blue\", $offsetY=\"-10\") UpdateRelStyle(SystemAA, SystemC, $textColor=\"blue\", $lineColor=\"blue\", $offsetY=\"-40\", $offsetX=\"-50\") UpdateRelStyle(SystemC, customerA, $textColor=\"red\", $lineColor=\"red\", $offsetX=\"-50\", $offsetY=\"20\") UpdateLayoutConfig($c4ShapeInRow=\"3\", $c4BoundaryInRow=\"1\")","title":"C4 context"},{"location":"diagrams/c4-deployment/","text":"C4Deployment title Deployment Diagram for Internet Banking System - Live Deployment_Node(mob, \"Customer's mobile device\", \"Apple IOS or Android\"){ Container(mobile, \"Mobile App\", \"Xamarin\", \"Provides a limited subset of the Internet Banking functionality to customers via their mobile device.\") } Deployment_Node(comp, \"Customer's computer\", \"Microsoft Windows or Apple macOS\"){ Deployment_Node(browser, \"Web Browser\", \"Google Chrome, Mozilla Firefox,<br/> Apple Safari or Microsoft Edge\"){ Container(spa, \"Single Page Application\", \"JavaScript and Angular\", \"Provides all of the Internet Banking functionality to customers via their web browser.\") } } Deployment_Node(plc, \"Big Bank plc\", \"Big Bank plc data center\"){ Deployment_Node(dn, \"bigbank-api*** x8\", \"Ubuntu 16.04 LTS\"){ Deployment_Node(apache, \"Apache Tomcat\", \"Apache Tomcat 8.x\"){ Container(api, \"API Application\", \"Java and Spring MVC\", \"Provides Internet Banking functionality via a JSON/HTTPS API.\") } } Deployment_Node(bb2, \"bigbank-web*** x4\", \"Ubuntu 16.04 LTS\"){ Deployment_Node(apache2, \"Apache Tomcat\", \"Apache Tomcat 8.x\"){ Container(web, \"Web Application\", \"Java and Spring MVC\", \"Delivers the static content and the Internet Banking single page application.\") } } Deployment_Node(bigbankdb01, \"bigbank-db01\", \"Ubuntu 16.04 LTS\"){ Deployment_Node(oracle, \"Oracle - Primary\", \"Oracle 12c\"){ ContainerDb(db, \"Database\", \"Relational Database Schema\", \"Stores user registration information, hashed authentication credentials, access logs, etc.\") } } Deployment_Node(bigbankdb02, \"bigbank-db02\", \"Ubuntu 16.04 LTS\") { Deployment_Node(oracle2, \"Oracle - Secondary\", \"Oracle 12c\") { ContainerDb(db2, \"Database\", \"Relational Database Schema\", \"Stores user registration information, hashed authentication credentials, access logs, etc.\") } } } Rel(mobile, api, \"Makes API calls to\", \"json/HTTPS\") Rel(spa, api, \"Makes API calls to\", \"json/HTTPS\") Rel_U(web, spa, \"Delivers to the customer's web browser\") Rel(api, db, \"Reads from and writes to\", \"JDBC\") Rel(api, db2, \"Reads from and writes to\", \"JDBC\") Rel_R(db, db2, \"Replicates data to\") UpdateRelStyle(spa, api, $offsetY=\"-40\") UpdateRelStyle(web, spa, $offsetY=\"-40\") UpdateRelStyle(api, db, $offsetY=\"-20\", $offsetX=\"5\") UpdateRelStyle(api, db2, $offsetX=\"-40\", $offsetY=\"-20\") UpdateRelStyle(db, db2, $offsetY=\"-10\")","title":"C4 deployment"},{"location":"diagrams/c4-dynamic/","text":"C4Dynamic title Dynamic diagram for Internet Banking System - API Application ContainerDb(c4, \"Database\", \"Relational Database Schema\", \"Stores user registration information, hashed authentication credentials, access logs, etc.\") Container(c1, \"Single-Page Application\", \"JavaScript and Angular\", \"Provides all of the Internet banking functionality to customers via their web browser.\") Container_Boundary(b, \"API Application\") { Component(c3, \"Security Component\", \"Spring Bean\", \"Provides functionality Related to signing in, changing passwords, etc.\") Component(c2, \"Sign In Controller\", \"Spring MVC Rest Controller\", \"Allows users to sign in to the Internet Banking System.\") } Rel(c1, c2, \"Submits credentials to\", \"JSON/HTTPS\") Rel(c2, c3, \"Calls isAuthenticated() on\") Rel(c3, c4, \"select * from users where username = ?\", \"JDBC\") UpdateRelStyle(c1, c2, $textColor=\"red\", $offsetY=\"-40\") UpdateRelStyle(c2, c3, $textColor=\"red\", $offsetX=\"-40\", $offsetY=\"60\") UpdateRelStyle(c3, c4, $textColor=\"red\", $offsetY=\"-40\", $offsetX=\"10\")","title":"C4 dynamic"},{"location":"diagrams/mermaid-sequence-diagram/","text":"sequenceDiagram title Sample Mermaid Diagram box Purple Alice & John participant A participant J end box Another Group participant B participant C end A->>J: Hello John, how are you? J->>A: Great! A->>B: Hello Bob, how is Charley? B->>C: Hello Charley, how are you?","title":"Mermaid sequence diagram"}]}